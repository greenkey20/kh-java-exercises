package com.kh.exception.run;

import com.kh.exception.controller.*;

public class ExceptionRun {
	
	/* errors(오류)의 종류
	 * - 시스템 에러: 컴퓨터의 오작동으로 인해 발생하는 에러 -> 소스코드로 해결이 안 됨; 심각함..
	 * - 컴파일 에러: 프로그램 실행 전 소스코드 상의 문법적인 문제로 발생하는 에러 -> 빨간줄로 알려줌 -> 소스코드 수정으로 해결
	 * - 런타임 에러: 프로그램 실행 중 발생하는 에러; 소스코드 상 문법적인 문제가 없는데 발생(빨간줄 안 생김) <- 개발자가 예측 가능한 경우 제대로 처리를 안 해 놓았을 경우 ou 사용자의 잘못일 경우(버그)..
	 * - 논리 에러: 소스코드 상 문법적인 문제도 없고, 실행했을 때도 굳이 문제가 발생하지 않지만, 프로그램 의도 상 맞지 않음; 기획과 설계(내가 가진 도구들을 가지고 어떻게 만들지 고민)가 잘못된 경우 발생; 찾는 데 시간 아주 오래 걸림
	 * 
	 * 예외: 시스템 에러를 제외한 나머지(컴파일, 런타임, 논리 에러) 비교적 덜 심각한 에러들; 개발자가 해결 가능함
	 * 예외 처리: 예외들이 발생했을 경우를 대비해서 
	 * 
	 * 앞으로 프로그래밍하면서 항상 try ~ catch문 넣어 예외처리할 것임
	 */

	public static void main(String[] args) {
		
		A_UncheckedException a = new A_UncheckedException();
//		a.method1();
//		a.method2();
//		a.method3();
		
		// throw를 이용 = 오류가 발생한 메소드를 호출한 부분으로 예외처리를 넘김 <- 그 메소드를 호출하지 않으면 발생하지 않았을테니 
		B_CheckedException b = new B_CheckedException();
		b.method1();

	}

}
